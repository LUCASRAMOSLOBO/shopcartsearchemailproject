<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <title>Document</title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
        <link href="https://fonts.googleapis.com/css2?family=Epilogue:wght@400;700&display=swap" rel="stylesheet">
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
      </head>
  <style>
    * {
  box-sizing: border-box;
  font-family: Epilogue, sans-serif;
  font-size: 10px;
  margin: 0;
  padding: 0;
}

body {
  background-color: rgb(246, 246, 246);
}

.header {
  position: relative;
  background-color: rgb(3, 52, 45);
  display: flex;
  align-items: center;
  width: 100%;
  height: 60px;
}

.container-title {
  width: 80%;
}

.title {
  color: rgb(221, 221, 221);
  font-size: 30px;
  padding-left: 30px;
}

.container-cartTitle {
  position: relative;
  display: flex;
  align-items: center;
  background-color: rgb(10, 118, 79);
  width: 40%;
  height: 100%;
  margin-left: 30px;
}

.container-cartTitle span {
  z-index: 1;
}

.container-cartTitle:after {
  content: '';
  position: absolute;
  top: 15px;
  right: 61.5%;
  width: 39.5%;
  height: 15px;
  background: rgb(10, 118, 79);
  transform: skew(-45deg);
  z-index: 0;
}

.container-cartTitle:before {
  content: '';
  position: absolute;
  top: 30px;
  right: 61.5%;
  width: 39.5%;
  height: 15px;
  background: rgb(10, 118, 79);
  transform: skew(45deg);
  z-index: 0;
}

.container-cartTitle .cart__title {
  color: white;
  font-size: 20px;
  padding-left: 35px;
  font-weight: 700;
}

.container1 {
  display: flex;
  justify-content: space-around;
  width: 100%;
}

.title strong {
  color: white;
}

.items {
  display: flex;
  flex-basis: 70%;
  flex-wrap: wrap;
  justify-content: center;
  margin: 40px 0;
}

.item {
  display: flex;
  flex-direction: column;
  height: auto;
  margin: 5px;
  width: 200px;
  border: 2px solid rgb(234, 234, 233);
  border-radius: 5px;
  box-sizing: border-box;
}

.item .item__id {
  display: none;
}

.item .item__title {
  display: flex;
  align-items: center;
  flex-grow: 1;
  padding: 10px;
  text-align: center;
}

.item .item__image {
  width: 100%;
  
}
.item .item__image2 {
  position:absolute;
  width: 50%;
}
.item .item__add {
  background-color: rgb(5, 52, 219);
  border: 0;
  cursor: pointer;
  margin: 0;
  padding: 10px;
  color: white;
}

.cart {
  display: flex;
  flex-basis: 32%;
  flex-flow: column wrap;
  background-color: rgb(241, 241, 238);
  height: 100vh;

}

.cart .cart__items {
  height: 500px;
  overflow-y: scroll;
  width: 100%;
  position: relative;
}
li {
  display: flex;
  position: relative;
  width: 100%;
}

.empty-cart {
  width: 370px;
  height: 35px;
  margin: 0 auto;
  border: 2px solid rgb(5, 52, 219);
  background-color: rgb(249, 249, 246);
}
.enviar {
  width: 370px;
  height: 35px;
  margin: 0 auto;
  border: 2px solid rgb(5, 52, 219);
  background-color: rgb(249, 249, 246);
}
.total-price {
  padding: 10px;
  position:relative;
  top: 100px;
  font-size: larger;
  font-weight: bold

}

.search {
  background-color: rgb(241, 241, 238);  
  width: 200%;
}
.mail{
    padding:10px;
    margin-top: 10px;
    margin-bottom: 10px;
    
}
.mail2{
    padding:10px;
    display: none;

    
}
  </style>
   <body>
    <header class="header">
      <div class="container-title">
        <span class="title"><strong>trybe</strong>shopping</span>
      </div>
      <i class="material-icons" style="font-size:45px;color:white">shopping_cart</i>
      <div class="container-cartTitle">
        <span class="cart__title">Meu carrinho</span>
      </div>
    </header>
    <section class="container1">
      <section class="search">
        <form action="" id="search" method="get" >
          <div class="container" >
            <label class="form-label lead" for="full-name">Procure por produtos no Mercado Livre</label>
            <input class="form-control" required type="text" name="full-name" id="email">
          </div>
          <button class="btn btn-secondary buttonEntrar" id="button">Search</button>
        </form>
      </section>
      <div id="pai">
      <section class="items" id="items"></section>
    </div>
      <section class="cart">
        <ol class="cart__items"></ol>
        <button class="empty-cart">Esvaziar carrinho</button>
        <form type="submit" action = '/enviar' method="post">
            <input name="conteudo" class="form-control mail2" id="textarea" placeholder="envie-nos o nome dos produtos e o preço por texto">
            <input type="email" class="form-control mail" name="email" id="mail" placeholder="insira seu email para receber detalhes do pedido">
            <button class ='enviar' id="enviardados" >Enviar dados</button>
    </form>
      </section>
    </section>
  </body>
</html>

 <script>
    // eslint-disable-next-line import/no-unresolved
const items = document.getElementsByClassName('items')[0];
const cartItems = document.getElementsByClassName('cart__items')[0];
const button = document.getElementsByClassName('empty-cart')[0];
const cart = document.querySelector('.cart');
let list;
let arrayCarrinho = [];
var products =[]
const fetchProducts = async (query) => {
  if (query === undefined) {
    throw new Error('You must provide an url');
  }
  const response = await fetch(`https://api.mercadolibre.com/sites/MLB/search?q=${query}`);
  const data = await response.json();
  return data;
  };
  const getSavedCartItems = () => {
  const str = localStorage.getItem('cartItems');

  return str;
};
const saveCartItems = (str) => {
  localStorage.setItem('cartItems', str); 
};
const fetchItem = async (ItemID) => {
  if (ItemID === undefined) {
    throw new Error('You must provide an url');
  }
  const response = await fetch(`https://api.mercadolibre.com/items/${ItemID}`);
  const data = await response.json();
  return data;
};
const createProductImageElement = (imageSource) => {
  const img3 = document.createElement('img');
  img3.className = 'item__image';
  img3.src = imageSource;
  return img3;
};
const createProductImageElementCart = (imageSource) => {
  const img4 = document.createElement('img');
  img4.className = 'item__image2';
  img4.src = imageSource;
  img4.style.width = '80px';
  img4.style.display = 'flex';
  img4.style.position = 'relative';
  return img4;
};
const createCustomElement = (element, className, innerText) => {
  const e = document.createElement(element);
  e.className = className;
  e.innerText = innerText;
  return e;
};
function open_popup(products){

  document.getElementById('textarea').value = products;
}

 
const totalPriceDiv = createCustomElement('span', 'total-price', 'preço:');
const loader = createCustomElement('p', 'loading', 'carregando...');
const cartIcon = document.getElementsByClassName('material-icons')[0];
const header = document.getElementsByClassName('header')[0];
const displayLoading = (() => {
  header.insertBefore(loader, cartIcon);
  setTimeout(() => {
    loader.remove();
  }, 1000); 
});
const storage = () => {
  const carteira = document.querySelectorAll('.cart__item');
  const cartTxt = [];
  carteira.forEach((element) => cartTxt.push(element.innerText));
  const cartIds = [];
  cartTxt.forEach((element) => cartIds.push((element.split(' |')[0]).split(' ')[1]));
  const strCarrinho = JSON.stringify(cartIds);
  arrayCarrinho = strCarrinho;
  saveCartItems(arrayCarrinho);
  const cartTxt2 = [];
  carteira.forEach((element) => cartTxt2.push(element.innerText));
  localStorage.setItem('ids', JSON.stringify(cartTxt2)); 
};
const atualizaPreco = () => {
  const itemscart = document.querySelectorAll('.cart__item');
  const array = Array.from(itemscart);
  const priceTotal = array.reduce((e, curr) => e + Number(curr.innerText.split('$')[1]), 0);
  totalPriceDiv.innerText = `Preço: ${priceTotal}R$`;
  return priceTotal
};
const clickListener = ((event) => {
  const item = event.target;
  const pai = item.parentNode;
  pai.removeChild(item);
  storage();
  atualizaPreco();
});
const limparCarrinho = (() => {
  cartItems.innerHTML = '';
  arrayCarrinho = [];
  localStorage.clear();
});
const createCartItemElement = ({ id, title, price, thumbnail }) => {
  const li = document.createElement('li');
  li.className = 'cart__item';
  li.innerText = `ID: ${id} | TITLE: ${title} | PRICE: $${price}`;
  li.addEventListener('click', clickListener);
  li.appendChild(createProductImageElementCart(thumbnail));

  return li;
};
const createCartItemElement2 = (get) => {
 
  const li = document.createElement('li');
  li.className = 'cart__item';
  li.innerText = get;
  li.addEventListener('click', clickListener);

  return li;
};
const addCarrinho = (async (id) => {
  const obj = list.find((i) => i.id === id);
  const item = createCartItemElement(obj);
  cartItems.appendChild(item);
});
const pegarCarrinhoLocalStorage = (() => {
  const carrinho = getSavedCartItems();
  if (carrinho !== null) {
    const array = JSON.parse(carrinho);
    array.forEach((i) => {
      addCarrinho(i);
    });
    arrayCarrinho = array;
  }
});
const adicionarItemAoCarrinho = ((event) => {
  const pai = event.target.parentNode;
  const id = pai.firstChild.innerText;
  const obj = list.find((i) => i.id === id);
  const cartItemElement = createCartItemElement(obj);
  cartItems.appendChild(cartItemElement);
  storage();
  atualizaPreco();
}); 
cart.appendChild(totalPriceDiv);
const createProductItemElement = ({ id, title, thumbnail }) => {
  const section = document.createElement('section');
  section.className = 'item';
  section.appendChild(createCustomElement('span', 'item_id', id));
  section.appendChild(createCustomElement('span', 'item__title', title));
  section.appendChild(createProductImageElement(thumbnail));
  const botao = createCustomElement('button', 'item__add', 'Adicionar ao carrinho!');
  botao.addEventListener('click', adicionarItemAoCarrinho);
  section.appendChild(botao);
  
  return section;
};
const email = document.getElementById('email');
const buttonLogin = document.querySelector('.buttonEntrar');
async function busca() {
  const search = [];
  search.push(email.value);
  localStorage.setItem('search', search); 
}
buttonLogin.addEventListener('click', busca);
window.onload = async () => { 
  displayLoading();
  const buscar = localStorage.getItem('search');
  if (buscar != null) {
    const teste = await fetchProducts(localStorage.getItem('search'));
    list = teste.results;
  } else {
    const teste = await fetchProducts('computador');
    list = teste.results;
  }
  pegarCarrinhoLocalStorage();
  atualizaPreco();
  list.forEach((i) => {
    const result = createProductItemElement(i);
    items.appendChild(result);
  });
  button.addEventListener('click', limparCarrinho);
  const cartItems2 = document.querySelectorAll('.cart__item');
  const cartTxt2 = [];
  cartItems2.forEach((element) => cartTxt2.push(element.innerText));
  const button2 = document.getElementById('enviardados') 
  let products2 = cartTxt2 +' ' + 'priceTotal:' + atualizaPreco();
  button2.addEventListener('click', open_popup(products2));
};

 
 </script>
 